Currently I am working on creating a join query between two tables, I was researching how to wriet a join query, and wwas able to test this in the psql cli and then transfered the command over to my model query which is connected to my api get request which I am testing via postman

NExt step I had to remove a specific table key from the features table and so I researched the problem and found this stack overflow link which helped me understand that I can specify the rows I want to include for a given table in my query.

https://stackoverflow.com/questions/3492904/mysql-select-all-columns-from-one-table-and-some-from-another-table

Next step I had to use data recieved form my db and create a nested array of objects to contain uniqiue data. Off the bat it seems that I will need to add some query logic and potentially create these objects manually before the data is sent back to the client

So, I looked that startUpCost
Then I needed to change my schema  rounda biut such that I created my foreign key connected after the csv files  ETL'ed data into my database becauseI read on a stackoverflow article it speeds up the COPY from method if foreign keys are added after, which makes sense

After creating a new schema I needed to create a join query between three seperate tables namely my styles photos and skus table formatted appropriately, so I am currently investigatinghow to go about writing this complex query, more on that later

--
03/07/22
Working with K6 stress testing I am going to first intall the program and do some reseearch on how to use the program for my server. I am choosing K6 because this tool offers the same application for unit testing, like with jest/supertest, but for performance. The main reasons I chose K6 is that it is compatible with modern languages meaning that it models it's user interface off of commonly used  languages including javaScript, Jest etc... Another reason is that while K6 is primarily used for load testing you can also use it to validate API responses, so it's pretty flexible in how you use it and the program at large is very well documented.

My first goal step in understanding how this stress testing framework is answering more fundamental questions including:
- what is a stress test?
A stress test is a ...

- What are virtual users?
A virtual user is an entity that exicutes a test and simulates a response. So, if you have 10 virtual users then 10 people ar ehitting endpoints and running tests, and each user repeates the test as many test as it can for as long as you specify (like 10 seconds). So, to test a specific application you can write a test such that do 1 then 2 then 3 etc... then n and that simulates one session. So, it's as if a user logged into your site and hit refresh a hundred times.
To understand how many vritual users you use should be quantified by the amount of sessions you have in an hour multiplied by the avergae sessiono duration divided by 3600
While testing you may want to test low users, average users and peak users

- What types of tests are there?
There are a couple tests, but the first is the baseline test. In K6 there is a concept of stages where for the duration of a minute go from 1 virtual user to 100 virtual users, then for the duration of one minute stay at 100 cirtual users, and then stage three decrement back down to 1 virtual user. So the baseline stages include: ramp-up, stay there, ramp-down
You can also have spike tests, which is self explanitory.

- What metrics should I be looking for, measuring and using?
There are standard metrics which include HTTP amount of requests, how long the request was blocked for, the DNS lookup time, how long it waited for the first request to occur, so these are standard metrics, but for my purposes I mostly just want to know how long it took to perform a query to my db client side. You can also create custom metrics depeneding on the specificity you are dealing with like for example keeping a counter of the errors which occur.
Other metrics include: trends, virtual users, iterations, success rate, error rate, threshold, execution time...
Checks are like asserts but differ in that they done halt execution, it just stops and returns a bool
Threholds are global pass/fail criteria that you can configure K6 to use, like the moment you hit 10% error rate then end the test suit (or you could not use this and let the test run all the way through and see at the end whether you pass or fail), but note a check will not fail a test.

check( res, {
  "is status 200": (r) => r.status === 200,
  "body size is 1176 bytes": (r) => r.body.length === 1176
});

//as long as the errors metric (custom metric) is less than 10% it will pass
export let options = {
  "threshold" {
    "errors": ["rate<0.1"], //<10% errors
  }
};

- How does a test run?
The first part is initializing any code like importing relevant components, and then second you have your options like setting up virtual users, and other metrics which can be setup in the CLI. Then there is some setup code like creating a bunch of users to re-use fo the duration of the test.